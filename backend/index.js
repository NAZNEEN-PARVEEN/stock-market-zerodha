require('dotenv').config();
const axios = require("axios");
const express = require("express");
const mongoose = require("mongoose");

const bodyParser = require("body-parser");
const cors = require("cors");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const PORT = process.env.PORT || 3002;
const uri = process.env.MONGO_URL;

// Ensure your UserModel is correctly imported and available
const {HoldingsModel}=require("./model/HoldingsModel");
const {PositionsModel}=require("./model/PositionsModel");
const {OrdersModel} = require("./model/OrdersModel");
const {UserModel} = require("./model/UserModel"); 

const app=express();

app.use(cors());
app.use(bodyParser.json());


// --------------------------------------------------------
// ðŸŸ¢ SIGNUP ROUTE
// --------------------------------------------------------
app.post("/signup", async (req, res) => {
Â  try {
Â  Â  const { name, email, password } = req.body;

Â  Â  // Check if user already exists
Â  Â  const existingUser = await UserModel.findOne({ email: email.toLowerCase() });
Â  Â  if (existingUser) {
Â  Â  Â  return res.status(400).json({ message: "User already exists" });
Â  Â  }

Â  Â  // Hash the password before saving
Â  Â  const hashedPassword = await bcrypt.hash(password, 10);

Â  Â  const user = new UserModel({
Â  Â  Â  name,
Â  Â  Â  email: email.toLowerCase(),
Â  Â  Â  password: hashedPassword,
Â  Â  });
Â  Â  await user.save();

Â  Â  res.status(201).json({
Â  Â  Â  message: "User created successfully",
Â  Â  Â  user: { name: user.name, email: user.email },
Â  Â  });

Â  } catch (err) {
Â  Â  console.error("Signup Error:", err.message);
Â  Â  res.status(500).json({ error: "Internal Server Error during signup" });
Â  }
});


// --------------------------------------------------------
// ðŸ”´ LOGIN ROUTE (FIXED)
// --------------------------------------------------------
app.post("/login", async (req, res) => {
Â  try {
Â  Â  const { email, password } = req.body;

Â  Â  // 1. Find user and EXPLICITLY retrieve the password hash
Â  Â  // .select('+password') is the critical fix for Mongoose to fetch the password hash.
Â  Â  const user = await UserModel.findOne({ email: email.toLowerCase() }).select('+password');
Â  Â  
Â  Â  if (!user) return res.status(404).json({ message: "User not found" });

Â  Â  // 2. Compare the plaintext password with the stored hash
Â  Â  const isMatch = await bcrypt.compare(password, user.password);
Â  Â  if (!isMatch) return res.status(401).json({ message: "Invalid credentials" });

Â  Â  // 3. Generate JWT Token
Â  Â  const token = jwt.sign(
Â  Â  Â  { id: user._id, email: user.email },
Â  Â  Â  process.env.JWT_SECRET, // Ensure JWT_SECRET is set in your .env file
Â  Â  Â  { expiresIn: "1h" }
Â  Â  );

Â  Â  // 4. Login Success
Â  Â  res.json({
Â  Â  Â  message: "Login successful",
Â  Â  Â  token,
Â  Â  Â  user: { name: user.name, email: user.email },
Â  Â  });

Â  } catch (err) {
Â  Â  console.error("Login Error:", err.message);
Â  Â  res.status(500).json({ error: "Internal Server Error during login" });
Â  }
});

// --------------------------------------------------------
// âš¡ Other Routes 
// --------------------------------------------------------

app.get('/allHoldings',async(req,res)=>{
Â  Â  let allHoldings = await HoldingsModel.find({});
Â  Â  res.json(allHoldings);
});

app.get('/allPositions',async(req,res)=>{
Â  Â  let allPositions = await PositionsModel.find({});
Â  Â  res.json(allPositions);
});

app.post("/newOrder", async (req, res) => {
Â  try {
Â  Â  let newOrder = new OrdersModel({
Â  Â  Â  name: req.body.name,
Â  Â  Â  qty: req.body.qty,
Â  Â  Â  price: req.body.price,
Â  Â  Â  mode: req.body.mode,
Â  Â  });
Â  Â  await newOrder.save();
Â  Â  res.send("Order saved!");
Â  } catch (err) {
Â  Â  console.error("Order Save Error:", err.message);
Â  Â  res.status(500).send("Failed to save order");
Â  }
});

// --------------------------------------------------------
// ðŸ”— DATABASE CONNECTION
// --------------------------------------------------------

mongoose.connect(uri)
Â  .then(() => {
Â  Â  console.log("DB connected");
Â  Â  app.listen(PORT, () => console.log("App started on port", PORT));
Â  })
Â  .catch(err => console.error("DB connection error:", err));

// (Original commented-out routes for adding initial data removed for brevity)
